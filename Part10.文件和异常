#读取文件
使用方法read()读取文件的全部内容到达文件末尾时会返回一个空字符串，要删除末尾的空行，可在print语句中使用rstrip()

#文件在程序所在的目录中
with open('file_name.txt') as file_object:
    contents = file_object.read()
    print(contents)
    


#绝对路径
file_path = 'C:\Users\text_files\filename.txt'
with open(file_path) as file_object:...

#逐行读取

file_name = 'pi_digits.txt'

with open(filename) as file_object:
    for line in file_object:
        print(line)
        
结果每行都有看不见的换行符，而print语句也会加上一个换行符

#创建一个包含文件各行内容的列表

filename = 'pi_digits.txt'

with open(filename) as file_object:
    lines = file_object.readlines()
    
for line in lines:
    print(line.rstrip())
    
    
10-1 Python学习笔记：在文本编辑器中新建一个文件，写几句话来总结以下你至此学到的Python知识，其中每一行都以"In Python you can"打头。将这个文件
     命名为learning_python.txt,并将其存储到为完成本章练习而编写的程序所在的目录中。编写一个程序，它读取这个文件，并将你所写的内容打印三次：
     第一次打印时读取整个文件；第二次打印时遍历文件对象；第三次打印时将各行存储在一个列表中，再在 with 代码块外打印它们。
     
with open ('learning_python.txt') as file_object:
    contents = file_object.read()
    print(contents.rstrip())


with open ('learning_python.txt') as file_object:
    for line in file_object:
        print(line.rstrip())
        
with open ('learning_python.txt') as file_object:
    lines = file_object.readlines()
    print(lines)

10-2 C语言学习笔记：可使用方法replace()将字符串中特定单词都替换为另一个单词。下面是一个简单的示例，演示了如何将句子中的'dog'替换为'cat'：
     message = "I really like dogs."
     message.replace('dog', 'cat')
     读取你刚创建的文件learning_python.txt中的每一行，将其中的Python都替换为另一门语言的名称，如C。将修改后的各行都打印到屏幕上。
     
with open ('learning_python.txt') as file_object:
    contents = file_object.read()
    print(contents.replace('Python', 'C'))
    
replace方法不会修改原字符串中的内容



#写入空文件

with open(filename,'w') as file_object:
    file_object.write("I love programming.")
    
如果要写入的文件不存在，函数open()将自动创建它。如果以写入'w'模式打开文件，指定文件已经存在，Python将在返回文件对象前清空该文件
Python只能将字符串写入文本文件
'a'  附加模式
'r'  读取模式
'w'  写入模式
'r+' 读取和写入文件模式
如果省略了模式实参，将以默认的只读模式打开文件

函数write()不会在写入的文本末尾添加换行符，需要自己在语句中包含换行符

#附加到文件

with open(filename, 'a') as file_object:
    file_object.write("I also love finding meaning in large datasets.\n")
    file_object.write("I love creating apps that can run in a browser.\n")
    

10-3 访客：编写一个程序，提示用户输入其名字；用户作出相应后，将其名字写入到文件guest.txt中

name = input("Please enter you name:")
filename = 'guest.txt'
with open(filename, 'w') as file_object:
    file_object.write(name)
    
10-4 访客名单：编写一个while循环，提示用户输入其名字。用户输入其名字后，在屏幕上打印一句问候语，并将一条访问记录添加到文件guest_book.txt中
     确保这个文件中的每条记录都独占一行

while True:
    name = input("Please input your name:\n(you can enter q to quit)")
    if name == 'q':
        break
    print("Hello," + name)
    with open('guest_book.txt', 'a') as file_object:
        file_object.write(name +"\n")

10-5 关于编程的调查：编写一个while循环，询问用户为何喜欢编程。每当用户输入一个原因后，都将其添加到一个存储所有原因的文件中

while True:
    reason = input("Please input your reason:\n(you can enter q to quit)")
    if reason == 'q':
        break
    with open('programming_reason.txt', 'a') as file_object:
        file_object.write(reason +"\n")


#异常
如果编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示traceback
使用异常能够避免崩溃

try:
    print(5/0)
except ZeroDivisionError:
    print("You can't divide by zero!")


#else代码块

print("Give me two numbers, and I'll divide them.")
print("Enter 'q' to quit.")

while True:
    first_number = input("\nFirst number: ")
    if first_number == 'q':
        break
    second_number = input("Second number: ")
    try:
        answer = int(first_number) / int(second_number)
    except ZeroDivisionError:
        print("You can't divide by 0!")
    else:
        print(answer)
        
如果除法运算成功，我们就用else代码块来打印结果


#方法split()
title = "Alice in Wonderland"
print(title.split())            #['Alice', 'in', 'Wonderland']

#失败时一声不吭
try:
    --snip--
except FileNotFoundError:
    pass
else:
    --snip--
当程序发生异常时不会出现traceback，也没有任何输出


10-6 加法运算：提示用户提供数值输入时，常出现的一个问题是，用户提供的是文本而不是数字。在这种情况下，当你尝试将输入转换为整数时，将引发
     ValueError异常。编写一个程序，提示用户输入两个字，再将它们相加并打印结果。在用户输入的任何一个值不是数字时都捕获ValueError异常，
     并打印一条友好的错误信息。对你编写的程序进行测试：先输入两个数字，再输入一些文本而不是数字

first_num = input("Please enter a number:")
another_num = input("Please enter another number:")
try:
    answer = int(first_num) + int(another_num)
except ValueError:
    print("please enter an integer!")
else:
    print(answer)
    

10-7 加法计算器：将你为完成练习10-6而编写的代码放在一个while循环中，让用户犯错(输入的是文本而不是数字)后能够继续输入数字

while True:
    try:
        first_num = input("Please enter a number:")
        another_num = input("Please enter another number:")
        answer = int(first_num) + int(another_num)
    except ValueError:
        print("please enter an integer!")
    else:
        print(answer)
        active = False
        break
        
 10-8 猫和狗：创建两个文件cats.txt和dog.txt，在第一个文件中至少存储三只猫的名字，在第二个文件中至少存储三条狗的名字。编写一个程序，尝试读取
      这些文件，并将其打印到屏幕上。将这些代码放在一个try-except代码块中，以便在文件不存在时捕获FileNotFound错误，并打印一条友好的消息。将
      其中一个文件转移到另一个地方，并确认except代码块中的代码将正确地执行。

try:
    with open('dogs.txt', 'r') as file_object:
        contexts = file_object.read()
        print(contexts.rstrip())

    with open('cats.txt', 'r') as file_object:
        contexts = file_object.read()
        print(contexts.rstrip())
except FileNotFoundError:
    print("I can't found it!")


10-9 沉默的猫和狗：修改你在练习10-8中编写的except代码块，让程序在文件不存在时一言不发

try:
    with open('dogs.txt', 'r') as file_object:
        contexts = file_object.read()
        print(contexts.rstrip())

    with open('cats.txt', 'r') as file_object:
        contexts = file_object.read()
        print(contexts.rstrip())
except FileNotFoundError:
    pass



#count()
能够确定特定单词或短语在字符串中出现了多少次

line = "Row,row,row your boat"
line.count('row')               #2
line.lower().count('row')       #3


#存储数据
json.dump()

import json

numbers = [2,3,5,7,11,13]
filename = 'number.json'
with open(filename,'w') as f_obj:
    json.dump(numbers, f_obj)
    
json.load()

import json

filename = 'number.json'
with open(filename) as f_obj:
    numbers = json.load(f_obj)
    
print(numbers)


#存储用户名字
import json

username = input("What is your name? ")

filename = 'username.json'
with open(filename,'w') as f_obj:
    json.dump(username,f_obj)
    print("We'll remember you when you come back," + username + "!")
    
#向被存储的用户发出问候
import json

filename = 'username.json'

with open(filename) as f_obj:
    username = json.load(f_obj)
    print("Welcome back," + username + "!")


#上述两个合成
import json

filename = 'username.json'
try:
    with open(filename) as f_obj:
        username = json.load(f_obj)
except FileNotFoundError:
    username = input("What is your name? ")
    with open(filename, 'w') as f_obj:
        json.dump(username, f_obj)
        print("We'll remember you when you come back," + username + "!")
else:
    print("Welcome back," + username + "!")



#重构
将代码划分为一系列完成具体工作的函数
import json

def get_stored_username():
    filename = 'username.json'
    try:
        with open(filename) as f_obj:
            username = json.load(f_obj)
    except FileNotFoundError:
        return None
    else:
        return username

def get_new_username():
    username = input("What is your name? ")
    filename = 'username.json'
    with open(filename, 'w') as f_obj:
        json.dump(username, f_obj)
    return username

def greet_user():
    username = get_stored_username()
    if username:
        print("Welcome back," + username + "!")
    else:
        username = get_new_username()
        print("We'll remember you when you come back, " + username + "!")

greet_user()


10-11 喜欢的数字：编写一个程序，提示用户输入他喜欢的数字，并使用json.dump()将这个数字存储到文件中。再编写一个程序，从文件中读取这个值，
      并打印消息“I know your favourite number! It’s _____.”。
      
import json

number = input("What's your favorite number?")
filename = 'favorite_number.json'
with open(filename, 'w') as f:
    json.dump(number, f)

with open(filename) as f:
    json.load(f)
    print("I know your favorite number! It's " + number )
    

10-12 记住喜欢的数字：将练习 10-11 中的两个程序合而为一。如果存储了用户喜欢的数字，就向用户显示它，否则提示用户输入他喜欢的数字并将其存储到
      文件中。运行这个程序两次，看看它是否像预期的那样工作。
      
import json

def get_number():
    filename = 'favorite_number.json'
    try:
        with open(filename) as f:
            number = json.load(f)
    except FileNotFoundError:
        return None
    else:
        return number

def show_number():
    number = get_number()
    if number:
        print("I know your favorite number! It's " + number + "!")
    else:
        number = input("What's your favorite number?")
        filename = 'favorite_number.json'
        with open(filename, 'w') as f:
            json.dump(number, f)

show_number()



10-13 验证用户：最后一个remember_me.py版本假设用户要么已输入其用户名，要么是首次运行该程序。我们应修改这个程序，以应对这样的情形；
      当前和最后一次运行该程序的用户并非同一个人。为此，在greet_user()中打印欢迎用户回来的消息前，先询问他用户名是否是对的。
      如果不对，就调用get_new_username()让用户输入正确的用户名。

import json

def get_stored_username():
    filename = 'username.json'
    try:
        with open(filename) as f_obj:
            username = json.load(f_obj)
    except FileNotFoundError:
        return None
    else:
        return username

def get_new_username():
    username = input("What is your name? ")
    filename = 'username.json'
    with open(filename, 'w') as f_obj:
        json.dump(username, f_obj)
    return username

def greet_user():
    username = get_stored_username()
    if username:
        message = input("Are you " + username + "?(yes/no)")
        if message == 'no':
            username = get_new_username()
        print("Welcome back," + username + "!")
    else:
        username = get_new_username()
        print("We'll remember you when you come back, " + username + "!")

greet_user()
