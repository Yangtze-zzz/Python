#读取文件
使用方法read()读取文件的全部内容到达文件末尾时会返回一个空字符串，要删除末尾的空行，可在print语句中使用rstrip()

#文件在程序所在的目录中
with open('file_name.txt') as file_object:
    contents = file_object.read()
    print(contents)
    


#绝对路径
file_path = 'C:\Users\text_files\filename.txt'
with open(file_path) as file_object:...

#逐行读取

file_name = 'pi_digits.txt'

with open(filename) as file_object:
    for line in file_object:
        print(line)
        
结果每行都有看不见的换行符，而print语句也会加上一个换行符

#创建一个包含文件各行内容的列表

filename = 'pi_digits.txt'

with open(filename) as file_object:
    lines = file_object.readlines()
    
for line in lines:
    print(line.rstrip())
    
    
10-1 Python学习笔记：在文本编辑器中新建一个文件，写几句话来总结以下你至此学到的Python知识，其中每一行都以"In Python you can"打头。将这个文件
     命名为learning_python.txt,并将其存储到为完成本章练习而编写的程序所在的目录中。编写一个程序，它读取这个文件，并将你所写的内容打印三次：
     第一次打印时读取整个文件；第二次打印时遍历文件对象；第三次打印时将各行存储在一个列表中，再在 with 代码块外打印它们。
     
with open ('learning_python.txt') as file_object:
    contents = file_object.read()
    print(contents.rstrip())


with open ('learning_python.txt') as file_object:
    for line in file_object:
        print(line.rstrip())
        
with open ('learning_python.txt') as file_object:
    lines = file_object.readlines()
    print(lines)

10-2 C语言学习笔记：可使用方法replace()将字符串中特定单词都替换为另一个单词。下面是一个简单的示例，演示了如何将句子中的'dog'替换为'cat'：
     message = "I really like dogs."
     message.replace('dog', 'cat')
     读取你刚创建的文件learning_python.txt中的每一行，将其中的Python都替换为另一门语言的名称，如C。将修改后的各行都打印到屏幕上。
     
with open ('learning_python.txt') as file_object:
    contents = file_object.read()
    print(contents.replace('Python', 'C'))
    
replace方法不会修改原字符串中的内容



#写入空文件

with open(filename,'w') as file_object:
    file_object.write("I love programming.")
    
如果要写入的文件不存在，函数open()将自动创建它。如果以写入'w'模式打开文件，指定文件已经存在，Python将在返回文件对象前清空该文件
Python只能将字符串写入文本文件
'a'  附加模式
'r'  读取模式
'w'  写入模式
'r+' 读取和写入文件模式
如果省略了模式实参，将以默认的只读模式打开文件

函数write()不会在写入的文本末尾添加换行符，需要自己在语句中包含换行符

#附加到文件

with open(filename, 'a') as file_object:
    file_object.write("I also love finding meaning in large datasets.\n")
    file_object.write("I love creating apps that can run in a browser.\n")
    

10-3 访客：编写一个程序，提示用户输入其名字；用户作出相应后，将其名字写入到文件guest.txt中

name = input("Please enter you name:")
filename = 'guest.txt'
with open(filename, 'w') as file_object:
    file_object.write(name)
    
10-4 访客名单：编写一个while循环，提示用户输入其名字。用户输入其名字后，在屏幕上打印一句问候语，并将一条访问记录添加到文件guest_book.txt中
     确保这个文件中的每条记录都独占一行

while True:
    name = input("Please input your name:\n(you can enter q to quit)")
    if name == 'q':
        break
    print("Hello," + name)
    with open('guest_book.txt', 'a') as file_object:
        file_object.write(name +"\n")

10-5 关于编程的调查：编写一个while循环，询问用户为何喜欢编程。每当用户输入一个原因后，都将其添加到一个存储所有原因的文件中

while True:
    reason = input("Please input your reason:\n(you can enter q to quit)")
    if reason == 'q':
        break
    with open('programming_reason.txt', 'a') as file_object:
        file_object.write(reason +"\n")


#异常
如果编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示traceback
使用异常能够避免崩溃

try:
    print(5/0)
except ZeroDivisionError:
    print("You can't divide by zero!")


#else代码块

print("Give me two numbers, and I'll divide them.")
print("Enter 'q' to quit.")

while True:
    first_number = input("\nFirst number: ")
    if first_number == 'q':
        break
    second_number = input("Second number: ")
    try:
        answer = int(first_number) / int(second_number)
    except ZeroDivisionError:
        print("You can't divide by 0!")
    else:
        print(answer)
        
如果除法运算成功，我们就用else代码块来打印结果


#方法split()
title = "Alice in Wonderland"
print(title.split())            #['Alice', 'in', 'Wonderland']

#失败时一声不吭
try:
    --snip--
except FileNotFoundError:
    pass
else:
    --snip--

当程序发生异常时不会出现traceback，也没有任何输出
    
