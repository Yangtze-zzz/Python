#创建Pygame窗口以及相应用户输入

import sys

import pygame

def run_game():
    #初始化游戏并创建一个屏幕对象
    pygame.init()
    screen = pygame.display.set_mode((1200,800))
    pygame.display.set_caption("Alien Invasion")

    #开始游戏的主循环
    while True:

        #监视键盘和鼠标事件
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        #让最近绘制的屏幕可见
        pygame.display.flip()

run_game()

pygame.event.get()  访问Pygame检测到的事件
所有键盘和鼠标事件都将促使for循环运行
pygame.display.flip()  命令Pygame让最近绘制的屏幕可见，它在每次执行while循环时都绘制一个空屏幕，并擦去旧屏幕，使得只有新屏幕可见


#设置背景色

import sys

import pygame

def run_game():
    #初始化游戏并创建一个屏幕对象
    pygame.init()
    screen = pygame.display.set_mode((1200,800))
    pygame.display.set_caption("Alien Invasion")

    #设置背景色
    bg_color = (230, 230, 230)

    #开始游戏的主循环
    while True:

        #监视键盘和鼠标事件
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        #每次循环时都重绘屏幕
        screen.fill(bg_color)

        #让最近绘制的屏幕可见
        pygame.display.flip()

run_game()

screen.fill()用背景色填充屏幕，这个方法只接受一个实参，一种颜色

#创建设置类

settings.py

class Settings():
    #存储《外星人入侵》的所有设置的类

    def __init__(self):     #初始化游戏的设置
        #屏幕设置
        self.screen_width = 1200
        self.screen_height = 800
        self.bg_color = (230, 230, 230)
        

pygame默认加载位图
选择图像时要特别注意其背景色，请尽可能选择背景透明的图像，这样可以使用图像编辑器将其背景设置为任何颜色

#创建Ship类

import pygame

class Ship():

    def __init__(self,screen):
        #初始化飞船并设置其初始位置
        self.screen = screen

        #加载飞船图像并获取其外接矩形
        self.image = pygame.image.load('images/ship.bmp')
        self.rect = self.image.get_rect()
        self.screen_rect = screen.get_rect()

        #将每艘新飞船放在屏幕底部中央
        self.rect.centerx = self.screen_rect.centerx
        self.rect.bottom = self.screen_rect.bottom

    def blitme(self):
        #在指定位置绘制飞船
        self.screen.blit(self.image, self.rect)


调用pygame.image.load()返回一个表示飞船的surface，并存储到self.image
使用get_rect获取对应surface的属性rect
要将游戏元素居中，可设置相应rect对象的属性center、centerx或centery
要让游戏元素与屏幕边缘对其，可使用属性top、bottom、left或right
要调整游戏元素的水平或垂直位置，可使用属性x和y，它们分别是相应矩形左上角的x和y坐标
(0,0)位于屏幕左上角，向右下方运动时，坐标值增大

#在屏幕上绘制飞船

import sys

import pygame

from settings import Settings
from ship import Ship

def run_game():
    #初始化pygame、设置和屏幕对象
    pygame.init()
    ai_settings = Settings()
    screen = pygame.display.set_mode(
        (ai_settings.screen_width, ai_settings.screen_height))
    pygame.display.set_caption("Alien Invasion")

    #创建一艘飞船
    ship = Ship(screen)

    #开始游戏的主循环
    while True:

        #监视键盘和鼠标事件
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        #每次循环时都重绘屏幕
        screen.fill(ai_settings.bg_color)
        ship.blitme()
        #让最近绘制的屏幕可见
        pygame.display.flip()

run_game()



12-1 蓝色天空：创建一个背景为蓝色的Pygame窗口

import sys

import pygame

def run_game():
    #初始化游戏并创建一个屏幕对象
    pygame.init()
    screen = pygame.display.set_mode((1200,800))
    pygame.display.set_caption("Blue")

    #设置背景色
    bg_color = (0, 0, 255)

    #开始游戏的主循环
    while True:

        #监视键盘和鼠标事件
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        #每次循环时都重绘屏幕
        screen.fill(bg_color)

        #让最近绘制的屏幕可见
        pygame.display.flip()

run_game()

12-2 游戏角色：找一幅你喜欢的游戏角色位图图像或将一幅图像转换为位图。创建一个类，将该角色绘制到屏幕中央，并将该图像的背景色设置为屏幕背景色，
     或将屏幕背景色设置为该图像的背景色
     
test.py

import sys

import pygame
from model import Model

def run_game():
    #初始化游戏并创建一个屏幕对象
    pygame.init()
    screen = pygame.display.set_mode((1500,1200))
    pygame.display.set_caption("Actor")

    #设置背景色
    bg_color = (230, 230, 230)
    model = Model(screen)
    #开始游戏的主循环
    while True:

        #监视键盘和鼠标事件
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        #每次循环时都重绘屏幕
        screen.fill(bg_color)
        model.blitme()
        #让最近绘制的屏幕可见
        pygame.display.flip()

run_game()


model.py

import pygame

class Model():

    def __init__(self,screen):
        #初始化模型并设置其初始位置
        self.screen = screen

        #加载模型图像并获取其外接矩形
        self.image = pygame.image.load('timg.bmp')
        self.rect = self.image.get_rect()
        self.screen_rect = screen.get_rect()

        #将模型放在屏幕底部中央
        self.rect.centerx = self.screen_rect.centerx


    def blitme(self):
        #在指定位置绘制模型
        self.screen.blit(self.image, self.rect)
        
        

#响应按键
每当用户按键时，都将在Pygame中注册一个事件，事件都是通过方法pygame.event.get()获取的

game_functions.py

import sys

import pygame

def check_events(ship):
    #响应按键和鼠标事件
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT:
                #向右移动飞船
                ship.rect.centerx +=1

def update_screen(ai_settings, screen, ship):
    #更新屏幕上的图像，并切换到新屏幕
    #每次循环时都重绘屏幕
    screen.fill(ai_settings.bg_color)
    ship.blitme()
    # 让最近绘制的屏幕可见
    pygame.display.flip()
    
alien_invasion.py


import pygame

from settings import Settings
from ship import Ship
import game_functions as gf

def run_game():
    #初始化pygame、设置和屏幕对象
    pygame.init()
    ai_settings = Settings()
    screen = pygame.display.set_mode(
        (ai_settings.screen_width, ai_settings.screen_height))
    pygame.display.set_caption("Alien Invasion")

    #创建一艘飞船
    ship = Ship(screen)

    #开始游戏的主循环
    while True:
        gf.check_events(ship)
        gf.update_screen(ai_settings, screen, ship)

run_game()


12-3 火箭：编写一个游戏，开始时屏幕中央有一个火箭，而玩家可使用四个方向键上下左右移动火箭。请务必确保火箭不会移到屏幕外面。

test_model.py

import pygame

class Model():

    def __init__(self, screen):
        #初始化模型并设置其初始位置
        self.screen = screen

        #加载模型图像并获取其外接矩形
        self.image = pygame.image.load('rocket.bmp')
        self.rect = self.image.get_rect()
        self.screen_rect = screen.get_rect()

        #将模型放在屏幕中央
        self.rect.center = self.screen_rect.center
        #移动标志
        self.moving_right = False
        self.moving_left = False
        self.moving_up = False
        self.moving_down = False

    def update(self):
        if self.moving_right and self.rect.right < self.screen_rect.right:
            self.rect.centerx += 1
        elif self.moving_left and self.rect.left > 0:
            self.rect.centerx -= 1
        elif self.moving_up and self.rect.top > 0:
            self.rect.centery -= 1
        elif self.moving_down and self.rect.bottom < self.screen_rect.bottom:
            self.rect.centery += 1

    def blitme(self):
        #在指定位置绘制模型
        self.screen.blit(self.image, self.rect)
        
        
test_move.py

import sys
import pygame

def check_events(rocket):
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT:
                rocket.moving_right = True
            elif event.key == pygame.K_LEFT:
                rocket.moving_left = True
            elif event.key == pygame.K_UP:
                rocket.moving_up = True
            elif event.key == pygame.K_DOWN:
                rocket.moving_down = True

        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_RIGHT:
                rocket.moving_right = False
            elif event.key == pygame.K_LEFT:
                rocket.moving_left = False
            elif event.key == pygame.K_UP:
                rocket.moving_up = False
            elif event.key == pygame.K_DOWN:
                rocket.moving_down = False



test.py

import sys

import pygame
from test_model import Model
import test_move as ts


def run_game():
    #初始化游戏并创建一个屏幕对象
    pygame.init()
    screen = pygame.display.set_mode((1500,1200))
    pygame.display.set_caption("Actor")

    #设置背景色
    bg_color = (230, 230, 230)
    rocket = Model(screen)
    #开始游戏的主循环
    while True:

        ts.check_events(rocket)
        rocket.update()
        #每次循环时都重绘屏幕
        screen.fill(bg_color)
        rocket.blitme()
        #让最近绘制的屏幕可见
        pygame.display.flip()

run_game()

12-4 按键：创建一个程序，显示一个空屏幕。在事件循环中，每当检测到pygame.KEYDOWN事件时都打印属性event.key。运行这个程序，并按各种键，看看
     Pygame如何响应
     
import sys
import pygame


def test():
    pygame.init()
    screen = pygame.display.set_mode((900,600))
    pygame.display.set_caption("press")
    bg_color = (255, 255, 255)
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    bg_color = (255, 0, 255)
                elif event.key == pygame.K_DOWN:
                    bg_color = (0, 255, 255)
                elif event.key == pygame.K_LEFT:
                    bg_color = (255, 255, 0)
                elif event.key == pygame.K_RIGHT:
                    bg_color = (0, 0, 255)
        screen.fill(bg_color)
        pygame.display.flip()
test()


12-5 侧面射击：编写一个游戏，将一艘飞船放在屏幕左边，并允许玩家上下移动飞船。在玩家按空格键时，让飞船发射一颗在屏幕中向右穿行的子弹，
     并在子弹离开屏幕而消失后将其删除

game_functions.py

import sys  
  
import pygame  
from bullet import Bullets  
def check_keydown_events(event,ai_setting,screen,rocket,bullets):  
    if event.key == pygame.K_UP:  
        rocket.moving_up = True  
    elif event.key == pygame.K_DOWN:  
        rocket.moving_down = True  
    elif event.key == pygame.K_SPACE:  
        new_bullet = Bullets(ai_setting,screen,rocket)  
        bullets.add(new_bullet)  
def check_keyup_events(event,rocket):  
    if event.key == pygame.K_UP:  
        rocket.moving_up = False  
    elif event.key == pygame.K_DOWN:  
        rocket.moving_down = False  
def check_events(ai_settings,screen,rocket,bullets):  
    """响应按键和鼠标事件"""  
    for event in pygame.event.get():  
        if event.type == pygame.QUIT:  
            print("Quit")  
            sys.exit()  
        elif event.type == pygame.KEYDOWN:  
            check_keydown_events(event,ai_settings,screen,rocket,bullets)  
        elif event.type == pygame.KEYUP:  
            check_keyup_events(event,rocket)  
def update_bullet(bullets):  
    for bullet in bullets:  
        if bullet.rect_left<=0:  
            bullets.remove(bullet)  
def update_screen(ai_settings,screen,rocket,bullets):  
    screen.fill(ai_settings.bg_color)  
    for bullet in bullets.sprites():  
        bullet.draw_bullet()  
    rocket.blitme()  
    pygame.display.flip()  
    
bullet.py

import pygame
from pygame.sprite import Sprite
class Bullets(Sprite):
    """docstring for Bullets"""
    def __init__(self, ai_settings, screen, rocket):
        super(Bullets, self).__init__()
        self.screen = screen
        self.rect = pygame.Rect(0, 0, ai_settings.bullet_width, ai_settings.bullet_height)
        self.rect.centery = rocket.rect.centery
        self.rect.right = rocket.rect.right
        # 存储小数表示的子弹位置
        self.x = float(self.rect.x)
        self.color = ai_settings.bullet_color
        self.speed_factor = ai_settings.bullet_speed_factor
    def update(self):
        self.x += self.speed_factor
        self.rect.x = self.x
    def draw_bullet(self):
        pygame.draw.rect(self.screen, self.color, self.rect)
        
setting.py

class Setting():  
  
    def __init__(self):  
        """初始化游戏的设置"""  
        #屏幕设置  
        self.screen_width = 1200  
        self.screen_height = 600  
        self.bg_color = (255,255,255)  
        self.ship_speed_factor = 1.5  
  
        self.bullet_speed_factor = 1  
        self.bullet_width = 15  
        self.bullet_height = 3  
        self.bullet_color =(60,60,60)  
        
rocket.py

import pygame
class Rocket():
    """docstring for Rocket"""
    def __init__(self,ai_setting, screen):
        self.screen = screen
        self.image = pygame.image.load('images/rocket.bmp')
        self.rect = self.image.get_rect()
        self.screen_rect = screen.get_rect()
        self.ai_setting = ai_setting
        self.rect.x = 0
        self.rect.centery = self.screen_rect.centery
        self.center = float(self.rect.centerx)
        self.centery = float(self.rect.centery)
        self.moving_up = False
        self.moving_down = False
    def update(self):
        if self.moving_up and self.rect.top > 0:
            self.centery -= self.ai_setting.ship_speed_factor
        if self.moving_down and self.rect.bottom < self.screen_rect.bottom:
            self.centery +=self.ai_setting.ship_speed_factor
        self.rect.centery = self.centery
    def blitme(self):
        self.screen.blit(self.image,self.rect)
        
run.py

import sys
import pygame
from rocket import Rocket
from setting import Setting
from pygame.sprite import Group
import game_functions as gf
def run():
    pygame.init()
    ai_setting = Setting()
    screen =pygame.display.set_mode((ai_setting.screen_width,ai_setting.screen_height))
    pygame.display.set_caption("Rocket")
    r = Rocket(ai_setting,screen)
    bullets = Group()
    while True:
        gf.check_events(ai_setting,screen,r,bullets)
        r.update()
        bullets.update()
        gf.update_screen(ai_setting,screen,r,bullets)
run()
