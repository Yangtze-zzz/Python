每条if语句的核心都是一个值为True和False的表达式

==  等于
!=  不等于
and 和
or  或


#检查特定值是否不包含在列表中
if user not in banned_users:
    print("you can pass")d
    

5-1 条件测试：编写一系列条件测试；将每个测试以及你对其结果的预测和实际结果都打印出来。你编写的代码应类似下面这样
    
    car = 'subaru'
    print("Is car == 'subaru'? I predict True.")
    print(car == 'subaru')
    
    print("\nIs car == 'audi'? I predict False.")
    print(car == 'audi')
    
    ·详细研究实验结果，直到你明白了它为何为True或False
    ·创建至少10个测试，且其中结果分别为True和False的测试都至少有5个
    
    
car = 'subaru'
print("Is car == 'subaru'? I predict True.")
print(car == 'subaru')
print("\nIs car == 'audi'? I predict False.")
print(car == 'audi')

name = 'Alice'
print("Is name == 'Alice'? I predict True.")
print(name == 'Alice')
print("\nIs name == 'Eric'? I predict False.")
print(name == 'Eric')

grade = 100
print("Is grade == 100? I predict True.")
print(grade == 100 )
print("\nIs grade == 60? I predict False.")
print(grade == 60)

water = 'hot'
print("Is water == 'hot'? I predict True.")
print(water == 'hot' )
print("\nIs water == 'ice'? I predict False.")
print(water == 'ice')

passed = True
print("Did he passed? I predict True.")
print(passed == True )
print("\nDid he passed? I predict False.")
print(passed == False)

5-2 更多的条件测试： 你并非只能创建10个测试，如果你想尝试做更多的比较，可以再编写一些测试，并将它们加入到conditional_tests.py中。对于下面
    列出的各种测试，至少编写一个结果为True和False的测试
    ·检查两个字符串相等和不等
    ·使用函数lower()的测试
    ·检查两个数字相等、不等、大于、小于、大于等于和小于等于
    ·使用关键字and和or的测试
    ·测试特定的值是否包含在列表中
    ·测试特定的值是否未包含在列表中
    

sex1 = 'male and female'
sex2 = 'Male and Female'
print(sex1 == sex2)

sex1 = 'male and female'
sex2 = 'Male and Female'
sex2.lower()
print(sex1 == sex2)

num1 = 4+4
num2 = 2*4
print(num1 == num2)
print(num1 != num2)
print(num1 > num2)
print(num1 < num2)
print(num1 >= num2)
print(num1 <= num2)

age1 = 22
age2 = 18
print(age1 == 22 and age2>=15)
print(age1 >30 or age2 <17)

list = [11,22,33,44,55]
print(11 in list)
print(23 not in list)



if语句
if-else语句
if-elif-else结构
if-elif结构后面不一定要有else代码块


5-3 外星人颜色#1：假设在游戏中刚射杀了一个外星人，请创建一个名为alien_color的变量，并将其设置为'green'、'yellow'、'red'
    ·编写一条if语句，检查外星人是否是绿色的；如果是，就打印一条消息，指出玩家获得了5个点
    ·编写这个程序的两个版本，在一个版本中上述测试通过了，而在另一个版本中未通过(未通过测试时没有输出)

alien_color = ['green', 'yellow', 'red']
color1 = 'green'
color2 = 'red'
if color1 == 'green':
    print("You get 5 points")
if color2 == 'green':
    print("You get 5 points")


5-4 外星人颜色#2：像练习5-3那样设置外星人颜色，并编写一个if-else结构。
    ·如果外星人是绿色的，就打印一条消息，指出玩家因射杀该外星人获得了5个点
    ·如果外星人不是绿色的，就打印一条消息，指出玩家获得了10个点
    ·编写这个程序的两个版本，在一个版本中执行了if代码块，而在另一个版本中执行else代码块

alien_color = ['green', 'yellow', 'red']
color1 = 'green'
color2 = 'red'
if color1 == 'green':
    print("You get 5 points")
else:
    print("You get 10 points")

if color2 == 'green':
    print("You get 5 points")
else:
    print("You get 10 points")


5-5 外星人颜色#3：将练习5-4中的if-else结构改成if-elif-else结构
    ·如果外星人是绿色的，就打印一条消息，指出玩家获得了5个点
    ·如果外星人是黄色的，就打印一条消息，指出玩家获得了10个点
    ·如果外星人是红色的，就打印一条消息，指出玩家获得了15个点
    ·编写这个程序的三个版本，它们分别在外星人为绿色、黄色、红色时打印一条消息

color1 = 'green'
color2 = 'red'
color3 = 'yellow'
if color1 == 'green':
    print("You get 5 points")
elif color1 == 'yellow':
    print("You get 10 points")
else:
    print("You get 15 points")

if color2 == 'green':
    print("You get 5 points")
elif color2 == 'yellow':
    print("You get 10 points")
else:
    print("You get 15 points")

if color3 == 'green':
    print("You get 5 points")
elif color3 == 'yellow':
    print("You get 10 points")
else:
    print("You get 15 points")



5-6 人生的不同阶段：设置变量age的值，再编写一个if-elif-else结构，根据age的值判断处于人生的哪个阶段
    ·如果一个人的年龄小于2岁，就打印一条消息，指出他是婴儿
    ·如果一个人的年龄为2(含)~4岁，就打印一条消息，指出他正蹒跚学步
    ·如果一个人的年龄为4(含)~13岁，就打印一条消息，指出他是儿童
    ·如果一个人的年龄为13(含)~20岁，就打印一条消息，指出他是青少年
    ·如果一个人的年龄为20(含)~65岁，就打印一条消息，指出他是成年人
    ·如果一个人的年龄超过65(含)岁就打印一条消息，指出他是老年人
    
age = 22
if age < 2:
    print("He is a baby.")
elif (age >= 2) and (age < 4):
    print("He is toddling.")
elif (age >= 4) and (age < 13):
    print("He is a children.")
elif (age >= 13) and (age < 20):
    print("He is a teenager.")
elif (age >= 20) and (age < 65):
    print("He is a adult.")
else:
    print("He is an old man.")




5-7 喜欢的水果：创建一个列表，其中包含你喜欢的水果，再编写一系列独立的if语句，检查列表中是否包含特定水果
    ·将该列表命名为favorite_fruits，并在其中包含三种水果
    ·编写5条if语句，每条都检查某种水果是否包含在列表中，如果包含在列表中，就打印一条消息，如"You really like bananas!"
    
favorite_fruits =['apple', 'banana', 'pear']
if 'apple' in favorite_fruits:
    print("You really like apple!")
if 'orange' in favorite_fruits:
    print("You really like orange!") 
if 'pear' in favorite_fruits:
    print("You really like pear!")
if 'banana' and 'pear' in favorite_fruits:
    print("You really like pear and banana!")
if 'watermelon' in favorite_fruits:
    print("You really like watermelon!")



lists=[]
在if语句中将列表名用在条件表达式中，Python将在列表至少包含一个元素时返回True，并在列表为空时返回False

5-8 以特殊方式跟管理员打招呼：创建一个至少包含5个用户名的列表，且其中一个用户名为'admin'。想象你要编写代码，在每位用户登录网站后都打印一条问候消息
    遍历用户名列表，并向每位用户打印一条问候消息
    ·如果用户名为'admin'，就打印一条特殊的问候消息，如"Hello admin, would you like to see a status report?"
    ·否则，打印一条普通的问候消息，如"Hello Eric,thank you for logging in again"
    
Usernames = ['admin', 'Eric', 'Mike', 'Amy', 'Jason']
for user in Usernames:
    if user == 'admin':
        print("Hello admin, would you like to see a status report?")
    else:
        print("Hello "+ user +", thank you for logging in again")

5-9 处理没有用户的情形：在为完成练习5-8编写的程序中，添加一条if语句，检查用户名列表是否为空
    ·如果为空，就打印消息"We need to find some users！"
    ·删除列表中的所有用户名，确定将打印正确的消息



5-10 检查用户名：按下面的说明编写一个程序，模拟网站确保每位用户的用户名都有独一无二的方式
     ·创建一个至少包含5个用户名的列表，并将其命名为current_users
     ·再创建一个包含5个用户名的列表，将其命名为new_users,并确保其中有一两个用户名也包含在列表的current_users中
