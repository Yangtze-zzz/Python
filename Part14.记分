14-1 按P开始新游戏：按P开始新游戏：鉴于游戏《外星人入侵》使用键盘来控制飞船，最好让玩家也能够通过按键来开始游戏。请添加让玩家在按P时开始游戏的代码。
     也许这样做会有所帮助：将check_play_button()的一些代码提取出来，放到一个名为start_game()的函数中，并在check_play_button()
     和check_keydown_events() 中调用这个函数。
14-2 射击练习：创建一个矩形，它在屏幕右边缘以固定的速度上下移动。然后，在屏幕左边缘创建一艘飞船，玩家可上下移动该飞船，并射击前述矩形目标。添加一
     个用于开始游戏的Play按钮，在玩家三次未击中目标时结束游戏，并重新显示Play按钮，让玩家能够通过单击该按钮来重新开始游戏。 
     
import sys
import pygame
from pygame.sprite import Sprite
from pygame.sprite import Group
from time import sleep
import pygame.font

screen=pygame.display.set_mode((1200,700))
bg_color=(20,40,50)
target_speed=5
charactor_speed=7
bullet_speed=8
game_active=True
fail_times=0
pygame.init()                                                       
class Target(Sprite):
    """建立被射击的矩形目标"""
    def __init__(self, screen):
        super(Target, self).__init__()
        self.screen = screen
        self.width, self.height=50,150
        self.screen_rect=self.screen.get_rect()
        self.rect = pygame.Rect(0, 0, self.width, self.height)
        self.rect.right=self.screen_rect.right
        self.rect.centery = self.screen_rect.centery
        self.target_color=(255, 255, 255)
        self.y=float(self.rect.y)
        self.moving_direction=1     
    def blitme(self):
        self.screen.fill(self.target_color,self.rect)
    def update(self):        
        self.y+=target_speed*self.moving_direction
        self.rect.y=self.y
def check_boundaries(target):                                  #检查矩形撞击边界和改变移动方向
    if target.rect.top<=target.screen_rect.top:
        target.moving_direction=1
    if target.rect.bottom>=target.screen_rect.bottom:
        target.moving_direction=-1
class Charactor(Sprite):
    """建立可操纵的角色"""
    def __init__(self, screen):
        super(Charactor, self).__init__()
        self.screen = screen
        self.image=pygame.image.load('timg.bmp')
        self.rect=self.image.get_rect()
        self.screen_rect=self.screen.get_rect()
        self.rect.left=self.screen_rect.left+5
        self.rect.centery=self.screen_rect.centery
        self.moving_up=False
        self.moving_dowm=False
    def blitme(self):
        self.screen.blit(self.image,self.rect)
    def update(self):
        if self.moving_up and self.rect.top>=self.screen_rect.top:
            self.rect.y-=charactor_speed
        if self.moving_dowm and self.rect.bottom<=self.screen_rect.bottom:
            self.rect.y+=charactor_speed
    def centerer_charactor(self):
        self.rect.centery=self.screen_rect.centery

def keyup_events(event,charactor):                   #按键抬起
    if event.key==pygame.K_UP:
        charactor.moving_up=False
    if event.key==pygame.K_DOWN:
        charactor.moving_dowm=False

def keydowm_events(event,charactor,bullets):         #按键落下
    if event.key==pygame.K_UP:
        charactor.moving_up=True
    if event.key==pygame.K_DOWN:
        charactor.moving_dowm=True
    if event.key==pygame.K_SPACE:
        bullet=Bullet(screen,charactor)
        bullets.add(bullet)
        
def check_events(charactor,bullets,stats,play_button,targets):      #检查事件发生
    for event in pygame.event.get():
        if event.type==pygame.KEYDOWN:
            keydowm_events(event,charactor,bullets)
        elif event.type==pygame.KEYUP:
            keyup_events(event,charactor)
        elif event.type==pygame.QUIT:
            sys.exit()
        elif event.type==pygame.MOUSEBUTTONDOWN:
            mouse_x,mouse_y=pygame.mouse.get_pos()
        check_play_button(stats,play_button,mouse_x,mouse_y,charactor,bullets,targets)
def check_play_button(stats,play_button,mouse_x,mouse_y,charactor,bullets,targets): #检查开始按钮，并清零游戏
    button_clicked=play_button.rect.collidepoint(mouse_x,mouse_y)
    if button_clicked and not stats.game_active:
        pygame.mouse.set_visible(False)
        stats.game_active=True
        bullets.empty()
        targets.empty()
        target=Target(screen)
        targets.add(target)
        global fail_times
        fail_times=0
        charactor.centerer_charactor()
    
class Bullet(Sprite):
    """建立子弹"""
    def __init__(self, screen,charactor):
        super(Bullet, self).__init__()
        self.screen = screen
        self.width,self.height=15,5
        self.bullet_color=(70,200,200)
        self.rect=pygame.Rect(0,0,self.width,self.height)
        self.creat_bullet=False
        self.screen_rect=self.screen.get_rect()
        self.rect.left=charactor.rect.right
        self.rect.centery=charactor.rect.centery
    def blitme(self):
        pygame.draw.rect(self.screen,self.bullet_color,self.rect)
    def update(self):
        self.rect.x+=bullet_speed

def bullet_target(targets,bullets,game_stat):           #检查子弹撞击矩形
    for bullet in bullets:
        collisions=pygame.sprite.groupcollide(targets,bullets,True, True)
        if collisions:
            game_stat.game_active=False
            pygame.mouse.set_visible(True)

def check_fail(bullets,game_stat):                    #检查失败次数，大于3则失败
    for bullet in bullets:
        if bullet.rect.left>=bullet.screen_rect.right:
            bullets.remove(bullet)
            global fail_times
            fail_times+=1
        if fail_times>=3:
            game_stat.game_active=False
            pygame.mouse.set_visible(True)
            
class Game_stat():                              #游戏开始时是不活跃状态
    def __init__(self):        
        self.game_active=False


class Button():
    """建立开始按钮"""
    def __init__(self, screen,msg):
        self.screen = screen
        self.screen_rect=screen.get_rect()
        self.width,self.height=200,50
        self.button_color=(0,255,0)
        self.text_color=(255,255,255)
        self.font=pygame.font.SysFont(None, 48)
        self.rect=pygame.Rect(0,0,self.width,self.height)
        self.rect.center=self.screen_rect.center
        self.prep_msg(msg)
    def prep_msg(self,msg):
        self.msg_image=self.font.render(msg,True,self.text_color,self.button_color)
        self.msg_image_rect=self.msg_image.get_rect()
        self.msg_image_rect.center=self.rect.center
    def draw_button(self):
        self.screen.fill(self.button_color,self.rect)              
        self.screen.blit(self.msg_image,self.msg_image_rect)       

def run_game():
    target=Target(screen)
    targets=Group()
    charactor=Charactor(screen)
    bullets=Group()
    targets.add(target)
    stats=Game_stat()
    play_button=Button(screen,"play")
    while True:    
        check_events(charactor,bullets,stats,play_button,targets)
        screen.fill(bg_color)
        charactor.blitme()
        if stats.game_active:
            for bullet in bullets:
                bullet.blitme()    
            for target in targets:
                target.blitme()    
            check_boundaries(target)
            targets.update()                
            charactor.update()
            bullets.update()
            bullet_target(targets,bullets,stats)
            check_fail(bullets,stats)
            for bullet in bullets.copy():
                if bullet.rect.x>=bullet.screen_rect.right:
                    bullets.remove(bullet)
            pygame.display.flip()
        if not stats.game_active:
            play_button.draw_button()
        pygame.display.flip()
        
run_game()


14-3 有一定难度的射击练习：以你为完成练习14-2而做的工作为基础，让标靶的移动速度随游戏进行而加快，并在玩家单击Play按钮时将其重置为初始值

import sys
import pygame
from pygame.sprite import Sprite
from pygame.sprite import Group
from time import sleep
import pygame.font

screen = pygame.display.set_mode((1200, 700))
bg_color = (20, 40, 50)
target_speed = 5
charactor_speed = 7
bullet_speed = 8
game_active = True
fail_times = 0
pygame.init()


class Target(Sprite):
    """建立被射击的矩形目标"""

    def __init__(self, screen):
        super(Target, self).__init__()
        self.screen = screen
        self.width, self.height = 50, 100
        self.screen_rect = self.screen.get_rect()
        self.rect = pygame.Rect(0, 0, self.width, self.height)
        self.rect.right = self.screen_rect.right
        self.rect.y=0
        #self.rect.centery= self.screen_rect.centery
        self.target_color = (255, 255, 255)
        self.y = float(self.rect.y)
        self.moving_direction = 1

    def blitme(self):
        self.screen.fill(self.target_color, self.rect)

    def update(self):
        self.y += target_speed * self.moving_direction
        self.rect.y = self.y


def check_boundaries(target):  # 检查矩形撞击边界和改变移动方向
    if target.rect.top <= target.screen_rect.top:
        target.moving_direction = 1
    if target.rect.bottom >= target.screen_rect.bottom:
        target.moving_direction = -1


class Charactor(Sprite):
    """建立可操纵的角色"""

    def __init__(self, screen):
        super(Charactor, self).__init__()
        self.screen = screen
        self.image = pygame.image.load('images\star.bmp')
        self.rect = self.image.get_rect()
        self.screen_rect = self.screen.get_rect()
        self.rect.left = self.screen_rect.left + 5
        self.rect.centery = self.screen_rect.centery
        self.moving_up = False
        self.moving_dowm = False

    def blitme(self):
        self.screen.blit(self.image, self.rect)

    def update(self):
        if self.moving_up and self.rect.top >= self.screen_rect.top:
            self.rect.y -= charactor_speed
        if self.moving_dowm and self.rect.bottom <= self.screen_rect.bottom:
            self.rect.y += charactor_speed

    def centerer_charactor(self):
        self.rect.centery = self.screen_rect.centery


def keyup_events(event, charactor):  # 按键抬起
    if event.key == pygame.K_UP:
        charactor.moving_up = False
    if event.key == pygame.K_DOWN:
        charactor.moving_dowm = False


def keydowm_events(event, charactor, bullets):  # 按键落下
    if event.key == pygame.K_UP:
        charactor.moving_up = True
    if event.key == pygame.K_DOWN:
        charactor.moving_dowm = True
    if event.key == pygame.K_SPACE:
        bullet = Bullet(screen, charactor)
        bullets.add(bullet)


def increase_speed(target_speed,charactor_speed,bullet_speed):
    target_speed *= 1.1
    charactor_speed *=1.1
    bullet_speed *= 1.1


def check_events(charactor, bullets, stats, play_button, targets):  # 检查事件发生
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            keydowm_events(event, charactor, bullets)
        elif event.type == pygame.KEYUP:
            keyup_events(event, charactor)
        elif event.type == pygame.QUIT:
            sys.exit()
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            check_play_button(stats, play_button, mouse_x, mouse_y, charactor, bullets, targets)


def check_play_button(stats, play_button, mouse_x, mouse_y, charactor, bullets, targets):  # 检查开始按钮，并清零游戏
    button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)
    if button_clicked and not stats.game_active:
        target_speed = 5
        charactor_speed = 7
        bullet_speed = 8

        pygame.mouse.set_visible(False)
        stats.game_active = True
        bullets.empty()
        targets.empty()
        target = Target(screen)
        targets.add(target)
        global fail_times
        fail_times = 0
        charactor.centerer_charactor()


class Bullet(Sprite):
    """建立子弹"""

    def __init__(self, screen, charactor):
        super(Bullet, self).__init__()
        self.screen = screen
        self.width, self.height = 15, 5
        self.bullet_color = (70, 200, 200)
        self.rect = pygame.Rect(0, 0, self.width, self.height)
        self.creat_bullet = False
        self.screen_rect = self.screen.get_rect()
        self.rect.left = charactor.rect.right
        self.rect.centery = charactor.rect.centery

    def blitme(self):
        pygame.draw.rect(self.screen, self.bullet_color, self.rect)

    def update(self):
        self.rect.x += bullet_speed


def bullet_target(targets, bullets, game_stat,screen):  # 检查子弹撞击矩形
    collisions = pygame.sprite.groupcollide(targets, bullets, True, True)
    if len(targets)==0:
        bullets.empty()
        increase_speed(target_speed,charactor_speed,bullet_speed)
        targets.add(Target(screen))



def check_fail(bullets, game_stat):  # 检查失败次数，大于3则失败
    for bullet in bullets:
        if bullet.rect.left >= bullet.screen_rect.right:
            bullets.remove(bullet)
            global fail_times
            fail_times += 1
        if fail_times >= 3:
            game_stat.game_active = False
            pygame.mouse.set_visible(True)


class Game_stat():  # 游戏开始时是不活跃状态
    def __init__(self):
        self.game_active = False


class Button():
    """建立开始按钮"""

    def __init__(self, screen, msg):
        self.screen = screen
        self.screen_rect = screen.get_rect()
        self.width, self.height = 200, 50
        self.button_color = (0, 255, 0)
        self.text_color = (255, 255, 255)
        self.font = pygame.font.SysFont(None, 48)
        self.rect = pygame.Rect(0, 0, self.width, self.height)
        self.rect.center = self.screen_rect.center
        self.prep_msg(msg)

    def prep_msg(self, msg):
        self.msg_image = self.font.render(msg, True, self.text_color, self.button_color)
        self.msg_image_rect = self.msg_image.get_rect()
        self.msg_image_rect.center = self.rect.center

    def draw_button(self):
        self.screen.fill(self.button_color, self.rect)
        self.screen.blit(self.msg_image, self.msg_image_rect)


def run_game():
    target = Target(screen)
    targets = Group()
    charactor = Charactor(screen)
    bullets = Group()
    targets.add(target)
    stats = Game_stat()
    play_button = Button(screen, "play")
    while True:
        check_events(charactor, bullets, stats, play_button, targets)
        screen.fill(bg_color)
        charactor.blitme()
        if stats.game_active:
            for bullet in bullets:
                bullet.blitme()
            for target in targets:
                target.blitme()
            check_boundaries(target)
            targets.update()
            charactor.update()
            bullets.update()
            bullet_target(targets, bullets, stats,screen)
            check_fail(bullets, stats)
            for bullet in bullets.copy():
                if bullet.rect.x >= bullet.screen_rect.right:
                    bullets.remove(bullet)
            pygame.display.flip()
        if not stats.game_active:
            play_button.draw_button()
        pygame.display.flip()


run_game()




14-4 历史最高分：每当玩家关闭并重新开始游戏《外星人入侵》时，最高分都将被重置。请修复这个问题，调用sys.exit()前将最高分写入文件，并当在
     GameStats中初始化最高分时从文件中读取它

#alien.py
import pygame
from pygame.sprite import Sprite

class Alien(Sprite):
    """表示单个外星人的类"""
    def __init__(self,ai_settings,screen):
        """初始化外星人并设置起始位置"""
        super(Alien, self).__init__()
        self.screen=screen
        self.ai_settings=ai_settings

        """加载外星人照片，设置rect值"""
        self.image=pygame.image.load("images/alien.bmp")
        self.rect=self.image.get_rect()

        """每个外星人最初都在屏幕的左上角附近"""
        self.rect.x=self.rect.width
        self.rect.y=self.rect.height

        """存储外星人的准确位置"""
        self.x=float(self.rect.x)


    def blitme(self):
        self.screen.blit(self.image,self.rect)

    def check_edge(self):
        """如果外星人位于屏幕边缘，返回true"""
        screen_rect=self.screen.get_rect()
        if self.rect.right>=screen_rect.right:
            return True
        elif self.rect.left<=0:
            return True


    def update(self):
        self.x+=(self.ai_settings.alien_speed_factor *
                    self.ai_settings.fleet_direction)
        self.rect.x=self.x



#alien_invision.py
import pygame
from settings import Settings
from ship import Ship
import game_functions as gf
from pygame.sprite import Group
from game_stats import GameStats
from button import Button
from scoreboard import Scoreboard

def run_game():
    #初始化游戏并创建一个屏幕对象
    pygame.init()
    ai_settings=Settings()
    screen=pygame.display.set_mode(
        (ai_settings.screen_width,ai_settings.screen_height))
    pygame.display.set_caption("Alien Invision")

    #子弹组
    bullets=Group()
    aliens=Group()

    #创建一艘飞船
    ship=Ship(ai_settings,screen)

    #创建Play按钮
    play_button=Button(screen,'Play')

    #创建一个存储游戏统计信息的实例,并创建记分牌
    stats=GameStats(ai_settings)
    sb=Scoreboard(screen,ai_settings,stats)

    gf.create_fleet(ai_settings, screen, ship, aliens)

    while True:
        #监听鼠标和键盘事件
        filename = 'high_score.txt'
        with open(filename, 'w') as file_object:
            file_object.write(str(stats.high_score))
        gf.check_event(ai_settings,screen,ship,bullets,stats, play_button,sb,aliens)

        if stats.game_active:
            ship.update()
            gf.update_bullets(bullets,ai_settings,screen,ship,aliens,stats,sb)
            gf.update_aliens(ai_settings,aliens,ship,stats, screen, bullets,sb)
        gf.update_screen(ai_settings,screen,ship,aliens,bullets,stats,play_button,sb)

run_game()

#bullet.py
import pygame
from pygame.sprite import Sprite


class Bullet(Sprite):
    def __init__(self,ai_settings,screen,ship):
        super(Bullet, self).__init__()
        self.screen=screen

        """在（0，0）处创建一个表示子弹的矩形，再设置正确的位置"""
        self.rect=pygame.Rect(0,0,ai_settings.bullet_width,ai_settings.bullet_height)
        self.rect.centerx=ship.rect.centerx
        self.rect.top=ship.rect.top

        """存储子弹位置"""
        self.y=float(self.rect.y)

        self.color=ai_settings.bullet_color
        self.speed_factor=ai_settings.bullet_speed_factor

    def update(self):
        self.y-=self.speed_factor
        self.rect.y=self.y

    def draw_bullet(self):
        pygame.draw.rect(self.screen,self.color,self.rect)

#button.py
import pygame;

class Button():

    def __init__(self,screen,msg):
        """初始化按钮属性"""
        self.screen=screen
        self.screen_rect=screen.get_rect()

        #设置按钮的尺寸和其他属性
        self.width,self.height=200,50
        self.button_color=(0,255,0)
        self.text_color=(255,255,255)
        self.font=pygame.font.SysFont(None,48)

        #创建按钮的rect对象，并使它居中
        self.rect=pygame.Rect(0,0,self.width,self.height)
        self.rect.center=self.screen_rect.center

        #按钮的标签只需创建一次
        self.prep_msg(msg)

    def prep_msg(self,msg):
        """将msg渲染橙图像，并使它在按钮上居中(文本颜色，背景色)"""
        self.mag_image=self.font.render(msg,True,self.text_color,self.button_color)
        self.mag_rect=self.mag_image.get_rect()
        self.mag_rect.center=self.rect.center

    def draw_button(self):
        """绘制一个用颜色填充的按钮，再绘制文本"""
        self.screen.fill(self.button_color,self.rect)
        self.screen.blit(self.mag_image,self.mag_rect)

#game_function.py
import pygame
import sys
from bullet import Bullet
from alien import Alien
from time import sleep
from button import Button
from scoreboard import Scoreboard
from ship import Ship


#函数check_events() 不需要任何形参
def check_event(ai_settings,screen,ship,bullets,stats, play_button,sb,aliens):
    """响应键盘和鼠标事件"""
    for event in pygame.event.get():
        if event.type==pygame.QUIT:
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            check_keydown_events(event,ai_settings,screen,ship,bullets, stats)
        elif event.type == pygame.KEYUP:
            check_keyup_event(event, ship)
        elif event.type==pygame.MOUSEBUTTONDOWN:
            #pygame.mouse.get_pos() ，它返回一个元组，其中包含玩家单击时鼠标的x 和y 坐标
            mouse_x,mouse_y=pygame.mouse.get_pos()
            check_play_button(stats, play_button, mouse_x, mouse_y,ai_settings,sb,aliens,bullets,screen,ship)

def check_play_button(stats,play_button,mouse_x,mouse_y,ai_settings,sb,aliens,bullets,screen,ship):
    """在玩家单击Play按钮时开始新游戏"""
    button_clicked=play_button.rect.collidepoint(mouse_x,mouse_y)
    if button_clicked and not stats.game_active:
        #重置游戏设置
        ai_settings.initialize_dynamic_settings()

        #隐藏光标
        pygame.mouse.set_visible(False)

        # 重置游戏统计信息
        stats.reset_stats()
        stats.game_active = True

        #重置记分牌图像
        sb.prep_score()
        sb.prep_high_score()
        sb.prep_level()
        sb.prep_ships()

        # 清空外星人列表和子弹列表
        aliens.empty()
        bullets.empty()

        create_fleet(ai_settings, screen, ship, aliens)
        ship.center_ship()

def start_game(play_button,mouse_x,mouse_y,stats):
    if play_button.rect.collidepoint(mouse_x,mouse_y):
        stats.game_active=True


def check_keydown_events(event,ai_settings,screen,ship,bullets,stats):
        if event.key == pygame.K_RIGHT:
            ship.moving_right = True
        if event.key == pygame.K_LEFT:
            ship.moving_left = True
        if event.key == pygame.K_SPACE:
            fire_bullets(ai_settings, screen, ship, bullets)
        if event.key==pygame.K_p:
            stats.game_active = True
        elif event.key==pygame.K_q:
            sys.exit()


def check_keyup_event(event,ship):
        if event.key == pygame.K_RIGHT:
            ship.moving_right = False
        if event.key == pygame.K_LEFT:
            ship.moving_left = False



def update_screen(ai_settings,screen,ship,aliens,bullets,stats,play_button,sb):
    #每次循环时重新绘制屏幕，背景色填充屏幕
    screen.fill(ai_settings.bg_color)

    for bullet in bullets.sprites():
        bullet.draw_bullet()
    ship.blitme()
    aliens.draw(screen)

    sb.show_score()

    #如果游戏处于非活动状态，就会显示Play按钮
    if stats.game_active==False:
        play_button.draw_button()

    #显示新屏幕
    pygame.display.flip()

def update_bullets(bullets,ai_settings,screen,ship,aliens,stats,sb):
    bullets.update()

    for bullet in bullets.copy():
        if bullet.rect.bottom <= 0:
            bullets.remove(bullet)
    check_bullet_alien_collisions(bullets, aliens, ai_settings, screen, ship,stats,sb)


def check_bullet_alien_collisions(bullets,aliens,ai_settings,screen,ship,stats,sb):
    # 检查是否有子弹击中了外星人
    # 如果是这样，就删除相应的子弹和外星人
    colisions = pygame.sprite.groupcollide(bullets, aliens, True, True)

    if colisions:
        for aliens in colisions.values():
            stats.score+=ai_settings.alien_points*len(aliens)
            sb.prep_score()
        check_high_score(stats,sb)

    # 删除现有的子弹并新建一群外星人
    if len(aliens) == 0:
        # 删除现有的子弹，加快游戏节奏，并创建一群新的外星人
        bullets.empty()
        ai_settings.increase_speed()

        # 提高等级
        stats.level+=1
        sb.prep_level()

        create_fleet(ai_settings, screen, ship, aliens)


def fire_bullets(ai_settings,screen, ship,bullets):
    if len(bullets) < ai_settings.bullets_allowed:
        bullet = Bullet(ai_settings, screen, ship)
        bullets.add(bullet)


def get_number_rows(ai_settings,ship_height,alien_height):
    available_space_y = ai_settings.screen_height - 3 * alien_height-ship_height
    number_rows=int(available_space_y/(2*alien_height))
    return number_rows

def get_number_aliens_x(ai_settings,alien_width):
    available_space_x = ai_settings.screen_width - 2 * alien_width
    number_aliens_x = int(available_space_x / (2 * alien_width))
    return number_aliens_x

def create_alien(ai_settings,screen,aliens,alien_number,row_number):
    alien = Alien(ai_settings, screen)
    alien_width=alien.rect.width
    alien_height=alien.rect.height
    alien.x = alien_width + 2 * alien_width * alien_number
    alien.y=alien_height+2*alien_height*row_number
    alien.rect.x = alien.x
    alien.rect.y=alien.y
    aliens.add(alien)

def create_fleet(ai_settings,screen,ship,aliens):
    """创建外星人群"""
    #创建一个外星人，计算一行可以容纳多少个外星人
    #外星人的间距就是外星人的宽度
    alien = Alien(ai_settings, screen)
    number_aliens_x=get_number_aliens_x(ai_settings,alien.rect.width)
    number_rows=get_number_rows(ai_settings,ship.rect.height,alien.rect.height)
    for row_number in range(number_rows):
        for alien_number in range(number_aliens_x):
            create_alien(ai_settings, screen, aliens, alien_number,row_number)


def check_fleet_edge(ai_settings,aliens):
    for alien in aliens.sprites():
        if alien.check_edge():
            change_fleet_direction(ai_settings,aliens)
            break

def change_fleet_direction(ai_settings,aliens):
    """将全部外星人下移，并改变他们的方向"""
    for alien in aliens.sprites():
        alien.rect.y+=ai_settings.fleet_drop_speed
    ai_settings.fleet_direction *= -1


def update_aliens(ai_settings,aliens,ship,stats, screen, bullets,sb):
    check_fleet_edge(ai_settings,aliens)#纵向位置变化
    aliens.update()#横向位置变化

    #检查外星人位置变化后是不是和飞船撞了
    if pygame.sprite.spritecollideany(ship,aliens):
        ship_hit(stats, ai_settings, aliens, screen, bullets, ship,sb)

    # 检查是否有外星人抵达屏幕底端
    check_aliens_bottom(stats,ai_settings,aliens,screen,bullets,ship,sb)


def check_aliens_bottom(stats,ai_settings,aliens,screen,bullets,ship,sb):
    """检查是否有外星人撞到了屏幕底端"""
    screen_rect=screen.get_rect()
    for alien in aliens.sprites():
        if alien.rect.bottom>screen_rect.bottom:
            ship_hit(stats,ai_settings,aliens,screen,bullets,ship,sb)
            break


def ship_hit(stats,ai_settings,aliens,screen,bullets,ship,sb):
    """飞船被撞，减一"""
    if stats.ship_left>0:
        stats.ship_left -= 1

        #更新记分牌
        sb.prep_ships()

    else:
        stats.game_active=False
        pygame.mouse.set_visible(True)

    #清空外星人和子弹
    aliens.empty()
    bullets.empty()

    #创建一群外星人，把飞船放到屏幕底部中央位置
    create_fleet(ai_settings, screen, ship, aliens)
    ship.center_ship()

    #暂停
    sleep(0.5)


def check_high_score(stats,sb):
    """检查是否产生了新的最高分数"""
    if stats.score>int(stats.high_score):
        stats.high_score=stats.score
        sb.prep_high_score()

#game_stats.py
class GameStats():

    def __init__(self,ai_settings):
        self.ai_settings=ai_settings
        self.reset_stats()

        self.game_active=False

        #在任何情况下都不应该重置最高得分
        with open('high_score.txt') as file_object:
            se=file_object.read()

        self.high_score=se


    def reset_stats(self):
        """初始化随游戏进行可能变化的统计信息"""
        self.ship_left=self.ai_settings.ship_limit
        self.score=0
        self.level = 1


import pygame.font
from pygame.sprite import Group

from ship import Ship


class Scoreboard():
    """显示得分信息的类"""

    def __init__(self,screen,ai_settings,stats):
        """初始化显示得分涉及的属性"""
        self.screen=screen
        self.screen_rect=screen.get_rect()
        self.ai_settings=ai_settings
        self.stats=stats

        #显示得分信息时使用的字体设置
        self.text_color=(30,30,30)
        self.font=pygame.font.SysFont(None,48)

        #准备包含最高得分和当前的份的图像
        # 准备包含得分的初始图像
        self.prep_score()
        self.prep_high_score()
        self.prep_level()
        self.prep_ships()


    def prep_ships(self):
        """显示还余下多少艘飞船"""
        self.ships=Group()
        for ship_number in range(self.stats.ship_left):
            ship=Ship(self.ai_settings,self.screen)
            ship.rect.x=10+ship_number* ship.rect.width
            ship.rect.y=10
            self.ships.add(ship)


    def prep_score(self):
        """将得分转化成一副渲染过的图像"""
        rounded_score=int(round(self.stats.score,-1))
        score_str="{:,}".format(rounded_score)
        #score_str=str(self.stats.score)
        self.score_image=self.font.render(score_str,True,self.text_color,self.ai_settings.bg_color)

        #将得分放在屏幕右上角
        self.score_rect=self.score_image.get_rect()
        self.score_rect.right=self.screen_rect.right-20
        self.score_rect.top=20

    def show_score(self):
        """在屏幕上面显示当前得分和最高得分"""
        self.screen.blit(self.score_image,self.score_rect)
        self.screen.blit(self.high_score_image,self.high_score_rect)
        self.screen.blit(self.level_image, self.level_rect)
        #绘制飞船
        self.ships.draw(self.screen)


    def prep_high_score(self):
        """将最高得分转化成一副渲染过的图像"""
        high_score=int(round(int(self.stats.high_score),-1))
        high_score_str="{:,}".format(high_score)
        self.high_score_image=self.font.render(high_score_str,True,self.text_color,self.ai_settings.bg_color)

        #将得分放在屏幕顶部中央
        self.high_score_rect=self.high_score_image.get_rect()
        self.high_score_rect.centerx=self.screen_rect.centerx
        self.high_score_rect.top=self.screen_rect.top

    def prep_level(self):
        """将等级转换为渲染的图像"""
        self.level_image = self.font.render(str(self.stats.level), True,
                                            self.text_color, self.ai_settings.bg_color)
        # 将等级放在得分下方
        self.level_rect=self.level_image.get_rect()
        self.level_rect.right=self.score_rect.right
        self.level_rect.top=self.score_rect.bottom+10


#settings.py
class Settings():
    #存储“外星人入侵的”所有的设置类
    def __init__(self):
        #屏幕设置
        self.screen_width=1200
        self.screen_height=700
        self.bg_color=(230,230,230)

        #飞船设置
        self.ship_limit = 3

        #子弹设置
        self.bullet_color=60,60,60
        self.bullet_height=15
        self.bullet_width=400
        self.bullets_allowed=5

        #外星人设置
        self.fleet_drop_speed=30


        #以什么样的速度加快游戏节奏
        self.speedup_scale=1.1
        #外星人点数的提高速度
        self.score_scale=1.5

        self.initialize_dynamic_settings()



    def initialize_dynamic_settings(self):
        """初始化随游戏进行而变化的设置"""
        self.ship_speed_factor=1.5
        self.bullet_speed_factor=3
        self.alien_speed_factor=1
        #fleet_direction为1表示向右移，为-1表示向左移
        self.fleet_direction=1

        # 计分
        self.alien_points = 50

    def increase_speed(self):
        """提高速度设置"""
        self.ship_speed_factor*=self.speedup_scale
        self.bullet_speed_factor*=self.speedup_scale
        self.alien_speed_factor*=self.speedup_scale

        self.alien_points = int(self.alien_points * self.score_scale)

#ship.py
import pygame
from pygame.sprite import Sprite

class Ship(Sprite):

    def __init__(self,ai_settings,screen):
        """初始化飞船并且设置它的初始位置"""
        super(Ship, self).__init__()
        self.screen=screen
        self.ai_settings=ai_settings
        """加载飞船图像并获取表示图像的矩形"""
        self.image=pygame.image.load("images/ship.bmp")
        self.rect=self.image.get_rect()
        self.screen_rect=screen.get_rect()
        """将每一艘新飞船放在屏幕底部的中央"""
        self.rect.centerx=self.screen_rect.centerx
        self.rect.bottom=self.screen_rect.bottom

        self.center=float(self.rect.centerx)
        self.moving_right=False
        self.moving_left=False
    def blitme(self):
        self.screen.blit(self.image,self.rect)

    def update(self):
        if self.moving_right and self.rect.right<self.screen_rect.right:
            self.center+=self.ai_settings.ship_speed_factor
        if self.moving_left and self.rect.left>0:
            self.center-=self.ai_settings.ship_speed_factor
        self.rect.centerx=self.center

    def center_ship(self):
        self.center=self.screen_rect.centerx



14-5 重构：找出执行了多项任务的函数和方法，对它们进行重构，以让代码高效而有序。例如，对于check_bullet_alien_collisions()，将其中外星人群被
     消灭干净时开始新等级的代码移到一个名为start_new_level()的函数中；又比如，对于Scoreboard的方法__init__()，将其中调用四个不同方法的代码
     移到一个名为prep_images()的方法中，以缩短方法__init__()。如果你重构了check_play_button(),方法prep_images()也可以为check_play_button()
     或start_game()提供帮助

#game_fuction
def start_new_level(bullets,aliens,ai_settings,stats,sb,screen,ship):
    # 删除现有的子弹并新建一群外星人
    if len(aliens) == 0:
        # 删除现有的子弹，加快游戏节奏，并创建一群新的外星人
        bullets.empty()
        ai_settings.increase_speed()

        # 提高等级
        stats.level+=1
        sb.prep_level()

        create_fleet(ai_settings, screen, ship, aliens)

def check_bullet_alien_collisions(bullets,aliens,ai_settings,screen,ship,stats,sb):
    # 检查是否有子弹击中了外星人
    # 如果是这样，就删除相应的子弹和外星人
    colisions = pygame.sprite.groupcollide(bullets, aliens, True, True)

    if colisions:
        for aliens in colisions.values():
            stats.score+=ai_settings.alien_points*len(aliens)
            sb.prep_score()
        check_high_score(stats,sb)
        
    # 删除现有的子弹并新建一群外星人
    start_new_level(bullets, aliens, ai_settings, stats, sb, screen, ship)


#scoreboard.py
class Scoreboard():
    """显示得分信息的类"""

    def __init__(self,screen,ai_settings,stats):
        """初始化显示得分涉及的属性"""
        self.screen=screen
        self.screen_rect=screen.get_rect()
        self.ai_settings=ai_settings
        self.stats=stats

        #显示得分信息时使用的字体设置
        self.text_color=(30,30,30)
        self.font=pygame.font.SysFont(None,48)

        #准备包含最高得分和当前的份的图像
        # 准备包含得分的初始图像
        self.prep_images()



    def prep_images(self):
        # 准备包含最高得分和当前的份的图像
        # 准备包含得分的初始图像
        self.prep_score()
        self.prep_high_score()
        self.prep_level()
        self.prep_ships()



def check_play_button(stats,play_button,mouse_x,mouse_y,ai_settings,sb,aliens,bullets,screen,ship):
    """在玩家单击Play按钮时开始新游戏"""
    button_clicked=play_button.rect.collidepoint(mouse_x,mouse_y)
    if button_clicked and not stats.game_active:
        #重置游戏设置
        ai_settings.initialize_dynamic_settings()

        #隐藏光标
        pygame.mouse.set_visible(False)

        # 重置游戏统计信息
        stats.reset_stats()
        stats.game_active = True

        #重置记分牌图像
        sb.prep_images()

        # 清空外星人列表和子弹列表
        aliens.empty()
        bullets.empty()

        create_fleet(ai_settings, screen, ship, aliens)
        ship.center_ship()

def start_game(play_button,mouse_x,mouse_y,stats):
    if play_button.rect.collidepoint(mouse_x,mouse_y):
        stats.game_active=True
