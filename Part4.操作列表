
#遍历列表
names =['Eric', 'Alice', 'David']
for name in names:
    print(name)
    

4-1 比萨：想出至少三种你喜欢的比萨，将其名称存储在一个列表中，再使用for循环将每种比萨的名称都打印出来
    ·修改这个for循环，使其打印包含比萨名称的句子，而不仅仅是比萨的名称。对于每种比萨，都显示一行输出，如"I like pepperoni pizza"
    `在程序末尾添加一行代码，它不在for循环中，指出你有多喜欢比萨。输出应包含针对每种比萨的消息，还有一个总结性句子，如"I really love pizza!"

pizzas = ['Seafood pizza', 'Sausage pizza', 'Cheese pizza']
for pizza in pizzas:
    print(pizza)

for pizza in pizzas:
    print(pizza)
    print("I like " +pizza)
    
print("I really love pizza!")


4-2 动物：想出至少三种有共同特征的动物，将这些动物的名称存储在一个列表中，再使用for循环将每种动物的名称都打印出来
    ·修改这个程序，使其针对每种动物都打印一个句子，如"A dog would make a great pet"
    ·在程序末尾添加一行代码，指出这些动物的共同之处，如打印诸如"Any of these animals would make a great pet!"

animals = ['cat', 'dog', 'bird']
for animal in animals:
    print("A " + animal + " would make a great pet")
print("Any of these animals would make a great pet!")


#分别打印1-4
for value in range(1,5):
    print(value)

#将数字转换为一个列表
number = list(range(1,6))
print(number)           #[1,2,3,4,5]

#可以使用range()指定步长
even_number = list(range(2,11,2))
print(even_number)      #[2, 4, 6, 8, 10]

# **表示乘方运算 2**3=8

digits = [1,2,3,4,5,6,7,8,9,0]
print(min(digits))      #0
print(max(digits))      #9
print(max(digits))      #45

squares = [values**2 for value in range(1,11)]      #列表解析
print(squares)          #[1,4,9,16,25,36,49,64,81,100]


4-3 数到20：使用一个for循环打印数字1~20(含)

for i in range(1,21):
    print(i)

4-4 一百万：创建一个列表，其中包含数字1~1000000，再使用一个for循环将这些数字打印出来

lists = list(range(1,1000001))
for i in lists:
    print(i)


4-5 计算1~1000000的总和：创建一个列表，其中包含数字1~1000000，再使用min()和max()核实该列表确实是从1开始，到1000000结束的。另外，对这个列表
    调用函数sum()，看看Python将一百万个数字相加需要多长时间
    
import time
lists = list(range(1,1000001))
for i in lists:
    print(i)
print(max(lists))
print(min(lists))
start = time.clock()
print(sum(lists))
end = time.clock()
print(end - start)


4-6 奇数：通过给函数range()指定第三个参数来创建一个列表，其中包含1~20的奇数；再使用一个for循环将这些数字都打印出来

lists = list(range(1,21,2))
for i in lists:
    print(i)


4-7 3的倍数：创建一个列表，其中包含3~30内能被3整除的数字；再使用一个for循环将这个列表中的数字都打印出来

lists = list(range(3,31,3))     #listss = [i * 3 for i in range(1, 11)]
for i in lists:
    print(i)


4-8 立方：将同一个数字乘三次称为立方。例如，在Python中，2的立方用2**3表示。请创建一个列表，其中包含前10个整数(即1~10)的立方，再使用一个for
    循环将这些立方数都打印出来

lists = list(range(1,11))
for i in lists:
    lf = i**3
    print(lf)


4-9 立方解析：使用列表解析生成一个列表，其中包含前10个整数的立方
lists = [value**3 for value in range(1,11)]
print(lists)




#切片
sports = ['run', 'basketball', 'volleyball', 'tennis', 'baseball']
print(sports[0:3])          #['run', 'basketball', 'volleyball']
print(sports[:4])           #['run', 'basketball', 'volleyball', 'tennis']
print(sports[3:])           #['tennis', 'baseball']
print(sports[-3:])          #['volleyball', 'tennis', 'baseball']


#遍历切片
sports = ['run', 'basketball', 'volleyball', 'tennis', 'baseball']
print("Here are the first three sports in the list:")
for sport in sports[:3]:
    print(sport.title())
    

#复制列表
my_foods = ['pizza', 'falafel', 'carrot cake']
friend_foods = my_foods[:]  #复制列表
print(friend_foods)         #['pizza', 'falafel', 'carrot cake']


#复制列表误区
my_foods = ['pizza', 'falafel', 'carrot cake']
friend_foods = my_foods
my_foods.append('apple')
print(my_foods)
print(friend_foods)
friend_foods.append('pear')
print(my_foods)
print(friend_foods)
#只是简单的将my_foods赋给friend_foods 不能得到2个列表，两个变量都指向同一个列表


4-10 切片：选择你在本章编写的一个程序，在末尾添加几行代码，以完成如下任务
     ·打印消息"The first three items in the list are:"再使用切片来打印列表的前三个元素
     ·打印消息"The items from the middle of the list are:"再使用切片来打印列表中间的三个元素
     ·打印消息"The last three items in the list are:"再使用切片来打印列表末尾的三个元素
     
digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
print("The first three items in the list are:")
for digit in digits[:3]:
    print(digit)
    
digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
print("The items from the middle of the list are:")
for digit in digits[3:6]:
    print(digit)
    
digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
print("The last three items in the list are:")
for digit in digits[-3:]:
    print(digit)
    

4-11 你的比萨和我的比萨：在你为完成练习4-1而编写的程序中，创建比萨列表的副本，并将其存储到变量friend_pizzas中，再完成如下任务
     ·在原来的比萨列表中添加一种比萨
     ·在列表friend_pizzas中添加另一种比萨
     ·核实你有两个不同的列表。为此，打印消息"My favorite pizzas are:",再使用一个for循环来打印第一个列表；打印消息
      "My friend's favorite pizzas are:",再使用一个for循环来打印第二个列表。核实新增的比萨被添加到了正确的列表中

pizzas = ['Seafood pizza']
friend_pizzas = pizzas[:]
pizzas.append('Sausage pizza')
friend_pizzas.append('Cheese pizza')
print("My favorite pizzas are:")
for i in pizzas:
    print(i)
print("My friend's favorite pizzas are:")
for i in friend_pizzas:
    print(i)


4-12 使用多个循环：在本节中，为节省篇幅，程序foods.py的每个版本都没有使用for循环来打印列表。请选择一个版本的foods.py，在其中编写
     两个for循环，将各个食物列表都打印出来

my_foods = ['pizza', 'falafel', 'carrot cake']
friend_foods = my_foods[:]
print("My favorite foods are:")
for i in my_foods:
    print(i)
friend_foods.append('apple')
print("\nMy friend's favorite foods are:")
for i in friend_foods:
    print(i)
    
    
#元组
不可变的，不可修改的列表
用()表示 
不能修改元组的元素，但是可以给存储元素的变量赋值
如
a =(200,50)
print(a)        #(200, 50)
a=(400,70)
print(a)        #(400, 70)


4-13 自助餐：有一家自助式餐厅，只提供五种简单食品。请想出五种简单的食品，并将其存储在一个元组中
     ·使用一个for循环将该餐馆提供的五种食品都打印出来
     ·尝试修改其中的一个元素，核实Python确实会拒绝你这样做
     ·餐馆调整了菜单，替换了它提供的两种食品，请编写一个这样的代码块给元组变量赋值，并使用一个for循环将新元组的每个元素都打印出来
     
foods = ('fish', 'pork', 'cake', 'tea', 'mutton')
for food in foods:
    print(food)
    
foods[0] = 'apple'    
#TypeError: 'tuple' object does not support item assignment

foods = ('vegetable', 'pork', 'milk', 'tea', 'mutton')
for food in foods:
    print(food)
