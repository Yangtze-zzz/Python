模块unittest提供代码测试

name.function.py

def get_formatted_name(first,last):
    full_name = first +' ' + last
    return full_name.title()
    
    
test_name_function.py

import unittest
from name_function import get_formatted_name


class NameTestCase(unittest.TestCase):

    def test_first_last_name(self):
        formatted_name = get_formatted_name('janis', 'joplin')
        self.assertEqual(formatted_name, 'Janis Joplin')


unittest.main()

方法名必须以test_打头，这样他才能够自动运行


11-1 城市和国家：编写一个函数，它接受两个形参：一个城市名和一个国家名。这个函数返回一个格式为 City, Country 的字符串，如 Santiago, Chile。
     将这个函数存储在一个名为 city _functions.py 的模块中。创建一个名为 test_cities.py 的程序，对刚编写的函数进行测试（别忘了，你需要导
     入模块 unittest 以及要测试的函数）。编写一个名为 test_city_country()的方法，核实使用类似于’santiago’和’chile’这样的值来调用前述函数时，
     得到的字符串是正确的。运行 test_cities.py，确认测试 test_city_country()通过了。

city_functions.py

def get_city(city, country):
    full_name = city + "," +country
    return full_name.title()

test_cities.py

import unittest
from city_functions import get_city


class CityTestCase(unittest.TestCase):

    def test_city_country(self):
        formatted_name = get_city('santiago', 'chile')
        self.assertEqual(formatted_name, 'Santiago,Chile')


unittest.main()


11-2 人口数量:修改前面的函数,使其包含第三个必不可少的形参population,并返回一个格式为City,Country - population xxx 的字符串，
     如Santiago,Chile - population 5000000。运行test_cities.py，确认测试test_city_country( )未通过。修改上述函数，将形参population
     设置为可选的。 再次运行test_cities.py， 确认测试test_city_country( ) 又通过了。再编写一个名为test_city_country_population( ) 的测试，
     核实可以使用类似于' santiago' 、 ' chile' 和' population=5000000' 这样的值来调用这个函数。 再次运行test_cities.py，
     确认测试test_city_country_population( ) 通过了。
     
city_functions.py

def get_city(city, country,population=5000000):
    full_name = city + "," +country+" - population "+str(population)
    return full_name.title()

     
test_cities.py

import unittest
from city_functions import get_city


class CityTestCase(unittest.TestCase):

    def test_city_country(self):
        formatted_name = get_city('santiago', 'chile')
        self.assertEqual(formatted_name, 'Santiago,Chile - Population 5000000')

    def test_city_country_population(self):
        city_country_population = get_city('santiago',  'chile', 5000000)
        self.assertEqual(city_country_population, 'Santiago,Chile - Population 5000000')

unittest.main()


#各种断言方法
assertEqual(a, b)           #核实a == b
assertNotEqual(a,b)         #核实a != b
assertTrue(x)               #核实x为True
assertFalse(x)              #核实x为False
assertIn(item, list)        #核实item在list中
assertNotIn(item, list)     #核实item在list中


#方法setUp()
如果在TestCase类中包含了方法setUp()，Python将先运行它，再运行各个以test_打头的方法
这样每个测试方法中都可使用在方法setUp()中创建的对象了


11-3 雇员：编写一个名为Employee的类，其方法__init__()接受名、姓和年薪，并将它们都存储在属性中。编写一个名为give_raise()的方法，它默认将
     年薪增加5000美元，但也能够接受其他的年薪增加量。为Employee编写一个测试用例，其中包含两个测试方法：test_give_default_raise()和
     test_give_custom_raise( )。使用方法setUp()，以免在每个测试方法中都创建新的雇员实例。运行这个测试用例，确认两个测试都通过了。
     
Employment.py

class Employee():

    def __init__(self, first_name, last_name, salary):
        self.first_name = first_name
        self.last_name = last_name
        self.salary = salary

    def give_raise(self, add=5000):
        self.salary += add
        return self.salary
        
test.py

from Employment import Employee
import unittest
class Test_Employment(unittest.TestCase):

    def setUp(self):
        self.DefaultEmploy = Employee('Chen', 'Yongchang', 1000)

    def test_give_default(self):
        self.DefaultEmploy.give_raise()
        self.assertEqual(self.DefaultEmploy.salary, 6000)

    def test_give_custom_raise(self):
        self.DefaultEmploy.give_raise(7000)
        self.assertEqual(self.DefaultEmploy.salary, 8000)

unittest.main()

