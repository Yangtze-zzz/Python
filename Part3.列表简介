列表用[ ]表示，用逗号分隔其中元素
第一个列表元素索引从0开始而不是1开始

bicycles = ['trek', 'cannondale', 'redline', 'specialized']
print(bicycles[0])    #trek
print(bicycles[-1])   #specialized


3-1 姓名：将一些朋友的姓名存储在一个列表中，并将其命名为names。依次访问该列表中的每个元素，从而将每个朋友的姓名都打印出来

names = ['Alice', 'Jason', 'James', 'Nick']
print(names[0])
print(names[1])
print(names[2])
print(names[3])

3-2 问候语：继续使用练习3-1中的列表，但不打印每个朋友的姓名，而为每人打印一条消息。每条消息都包含相同的问候语，但抬头为相应朋友的姓名

names = ['Alice', 'Jason', 'James', 'Nick']
print("Hey " + names[0] + ", what's up?")

3-3 自己的列表：想想你自己喜欢的通勤方式，如骑摩托车或开汽车等，并创建一个包含多种通勤方式的列表。根据该列表打印一系列有关这些通勤方式的宣言
    如"I would like to own a Honda motorcycle"
    
ways = ['car', 'bicycle', 'motorcycle']
for i in range(0,3):
    print("I would like to own a " + ways[i] )
    
    
    
#修改列表元素
names = ['Alice', 'Jason', 'James', 'Nick']
names[0] = 'Eric'
print(names)            #['Eric', 'Jason', 'James', 'Nick']


names = ['Eric', 'Jason', 'James', 'Nick']
names.append('Mike')    #在列表末尾添加元素
print(names)            #['Eric', 'Jason', 'James', 'Nick', 'Mike']


names = ['Eric', 'Jason', 'James', 'Nick']
names.insert(0, 'John') #指定新元素的索引和值
print(names)            #['John', 'Eric', 'Jason', 'James', 'Nick']


names = ['Eric', 'Jason', 'James', 'Nick']
del names[1]            #删除列表中指定位置的元素
print(names)            #['Eric', 'James', 'Nick']


names = ['Eric', 'Jason', 'James', 'Nick']
names.pop()             #删除列表末尾元素
print(names)            #['Eric', 'Jason', 'James']

names = ['Eric', 'Jason', 'James', 'Nick']
poped_names = names.pop()   #可获取被删除的元素的值
print(poped_names)          #Nick

names = ['Eric', 'Jason', 'James', 'Nick']
names.pop(2)            #删除列表中指定索引位置的元素
print(names)            #['Eric', 'Jason', 'Nick']


names = ['Eric', 'Jason', 'Nick', 'James','Nick']
names.remove('Nick')    #删除列表中指定元素的值，且只能删除第一个指定元素的值
print(names)            #['Eric', 'Jason', 'James', 'Nick']


3-4 嘉宾名单：如果你可以邀请任何人一起共进晚餐，你会邀请哪些人？请创建一个列表，其中包含至少3个你想邀请的人；然后，使用这个列表打印信息，
              邀请这些人来与你共进晚餐。
              
names = ['Jason', 'James', 'Nick']
for i in range(0,3):
    print(names[i] + ", are you free to come to dinner with me?")
    
3-5 修改嘉宾名单：你刚得知有位嘉宾无法赴约，因此需要另外邀请一位嘉宾
    ·已完成练习3-4时编写的程序为基础，在程序末尾添加一条print语句，指出哪位嘉宾无法赴约
    ·修改嘉宾名单，将无法赴约的嘉宾的姓名替换为新邀请的嘉宾的姓名
    ·再次打印一系列消息，向名单中的每位嘉宾发出邀请

names = ['Jason', 'James', 'Nick']
print(names[1] + " can't come to the dinner")
names[1] = 'Alice'
for i in range(0,3):
    print(names[i] + ", are you free to come to dinner with me?")
    
3-6 添加嘉宾：你刚找到了一个更大的餐桌，可容纳更多的嘉宾。请想想你还想邀请哪三位嘉宾
    ·已完成练习3-4或练习3-5时编写的程序为基础，在程序末尾添加一条print语句，指出你找到了一个更大的餐桌。
    ·使用insert()将一位新嘉宾添加到名单开头
    ·使用insert()将另一位新嘉宾添加到名单中间
    ·使用append()将最后一为新嘉宾添加到名单末尾
    ·打印一系列消息，向名单中的每位嘉宾发出邀请
    
names = ['Jason', 'James', 'Nick']
print(names[1] + " can't come to the dinner")
names[1] = 'Alice'
for i in range(0,3):
    print(names[i] + ", are you free to come to dinner with me?")
print("I found a big table for dinner")

names.insert(0,'甲')
names.insert(2,'乙')
names.append('丙')
for i in range(0,6):
    print(names[i] + ", are you free to come to dinner with me?")
    
3-7 缩减名单：你刚得知新购买的餐桌无法及时送达，因此只能邀请两位嘉宾
    ·已完成练习3-6时编写的程序为基础，在程序末尾添加一行代码，打印一条你只能邀请两位嘉宾共进晚餐的消息
    ·使用pop()不断地删除名单中的嘉宾，直到只有两位嘉宾位置。每次从名单中弹出一位嘉宾时，都打印一条消息，让该嘉宾知悉你狠抱歉，无法邀请他共进晚餐
    ·对于余下的两位嘉宾中的每一位，都打印一条消息，指出他依然在受邀人之列
    ·使用del将最后两位嘉宾从名单中删除，让名单变成空的。打印该名单，核实程序结束时名单确实是空的
    
print("I am so sorry about that only guests can come this party")

for i in range(0,4):
    cancel =names.pop()
    print(cancel + " I'm sorry I can't invite you to dinner")
    
for name in names:
    print(name + " you're still on the list of invitees")

del names[1]        #del names[0]也可以
del names[0]
print(names)



px = ['22c', 'Acs', '33bby', 'awb', 'pk', 'cyz', 'zzz']
px.sort()               #影响原数组  排序顺序：数字，大写，小写
print(px)               #['22c', '33bby', 'Acs', 'awb', 'cyz', 'pk', 'zzz']
#按顺序相反的顺序排列
px.sort(reverse=True)   #['zzz', 'pk', 'cyz', 'awb', 'Acs', '33bby', '22c']


px = ['22c', 'Acs', '33bby', 'awb', 'pk', 'cyz', 'zzz']
t_px =sorted(px)        #临时排序，不影响原列表
print(t_px)             #['22c', '33bby', 'Acs', 'awb', 'cyz', 'pk', 'zzz']


px = ['22c', 'Acs', '33bby', 'awb', 'pk', 'cyz', 'zzz']
px.reverse()            #反转列表
print(px)               #['zzz', 'cyz', 'pk', 'awb', '33bby', 'Acs', '22c']


px = ['22c', 'Acs', '33bby', 'awb', 'pk', 'cyz', 'zzz']
len(px)                 #计算列表长度
print(len(px) )         #7


3-8 放眼世界：想出至少5个你渴望去旅游的地方
    ·将这些地方存储在一个列表中，并确保其中的元素不是不是按字母顺序排列的
    ·按原始排列顺序打印该列表。不要考虑输出是否整洁的问题，只管打印原始Python列表
    ·使用sorted()按字母顺序打印这个列表，同时不要修改它。
    ·再次打印该列表，核实排列顺序未变
    ·使用sorted()按与字母顺序相反的顺序打印这个列表，同时不要修改它
    ·再次打印该列表，核实排列顺序未变
    ·使用reverse()修改列表元素的排列顺序。打印该列表，核实排列顺序确实变了
    ·使用reverse()再次修改列表元素的排列顺序。打印该列表，核实已恢复到原来的排列顺序
    ·使用sort()修改该列表，使其元素按与字母顺序相反的顺序排列。打印该列表，核实排列顺序确实变了
    
tourisms = ['America', 'Japan', 'Britain', 'Europe', 'Korea']
print(tourisms)

print(sorted(tourisms))
print(tourisms)

print(sorted(tourisms,reverse=True))
print(tourisms)

tourisms.reverse()
print(tourisms)

tourisms.reverse()
print(tourisms)

tourisms.sort()
print(tourisms)


3-9 晚餐嘉宾：在完成练习3-4~练习3-7时编写的程序之一中，使用len()打印一条消息，指出你邀请了多少位嘉宾来与你共进晚餐

len(names)


3-10 尝试使用各个函数：想想可存储到列表中的东西，如山岳、河流、国家、城市、语言，或你喜欢的任何东西。编写一个程序，在其中创建一个包含这些元素
     的列表，然后，对于本章介绍的每个函数，都至少使用一次来处理这个列表
     
languages = ['Chinese', 'English', 'Thai', 'Japanese', 'Russian']
print(sorted(languages))
print(sorted(languages,reverse=True))
languages[0] = 'French'
languages.append('Italian')
languages.pop()
languages.insert(3, 'Spanish')
languages.remove('Thai')
del languages[2]
languages.reverse()
print(languages)
languages.sort()
print(languages)
languages.sort(reverse=True)
print(languages)
print(len(languages))
